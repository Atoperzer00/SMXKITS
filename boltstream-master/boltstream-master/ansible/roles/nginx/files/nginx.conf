user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" $request_time';
    access_log /var/log/nginx/access.log main;
    aio on;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    variables_hash_max_size 4096;
    client_max_body_size 0;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    resolver 127.0.0.1 valid=300s;
    real_ip_header X-Forwarded-For;
    set_real_ip_from 127.0.0.1;
    set_real_ip_from 10.0.0.0/8;
    real_ip_recursive on;

    upstream app {
        server 127.0.0.1:{{ app_port }};
    }

    server {
        listen 8080;
        server_name {{ app_host }};
        root {{ web_root }};

        add_header Access-Control-Allow-Origin "https://{{ app_host }}";
        add_header Access-Control-Allow-Methods "GET,HEAD,OPTIONS";
        add_header Access-Control-Allow-Credentials "true";
        proxy_set_header Host $http_host;
        expires -1d;
        set $rtmp_secret "{{ rtmp_secret }}";

        location = /health {
            default_type text/plain;
            return 200 "OK\n$hostname\n";
        }

        location = /authorize {
            internal;

            set_hmac_sha1 $sig $rtmp_secret "$cookie_sessionid $stream_uuid";

            if ($http_authorization) {
                set_hmac_sha1 $sig $rtmp_secret "$http_authorization $stream_uuid";
            }

            set_encode_base64 $sig $sig;

            if ($sig != $user_sig) {
                return 403;
            }

            proxy_set_header X-RTMP-Secret $rtmp_secret;
            proxy_pass https://{{ app_host }}/api/v1/authorize/$stream_uuid;
        }

        location ~ ^/keys/([^/]+)/[0-9]+\.key$ {
            set $stream_uuid $1;
            set $user_sig $arg_s;
            auth_request /authorize;
        }

        location ~ ^/live/([^/]+)/index\.m3u8$ {
            set $stream_uuid $1;
            set_hmac_sha1 $sig $rtmp_secret "$cookie_sessionid $stream_uuid";

            if ($http_authorization) {
                set_hmac_sha1 $sig $rtmp_secret "$http_authorization $stream_uuid";
            }

            set_encode_base64 $sig $sig;
            subs_filter_types application/vnd.apple.mpegurl;
            subs_filter "URI=\"/keys/([^/]+)/([0-9]+)\.key\"" "URI=\"/keys/$1/$2.key?s=$sig\"" gr;
        }

        location ~ ^/live/[^/]+/[0-9]+\.ts$ {
            expires {{ playlist_seconds * 2 }}s;
        }

        location ~ ^/live/([^/]+)/preview\.mp4$ {
            mp4;
            expires 10s;
            alias "{{ web_root }}/record/$1_thumb.mp4";
        }

        location ~ ^/live/([^/]+)/preview\.jpg$ {
            set $stream_uuid $1;
            set $size "";
            set $seek 1000;
            if ($arg_width) {
                set $size "$size-w$arg_width";
            }
            if ($arg_height) {
                set $size "$size-h$arg_height";
            }
            if ($arg_seek) {
                set $seek "$arg_seek";
            }
            expires 10s;
            rewrite ^ /record/${stream_uuid}_thumb.mp4/thumb-$seek$size.jpg last;
        }

        location ~ ^/record/[^/]+/(.+)$ {
            internal;
            vod thumb;
            vod_mode local;
            expires 10s;
            error_page 404 =200 /record/default_preview.mp4/$1;
        }

        {% if vod_enable_encryption %}
        location ~ ^/vod/([^/]+)/encryption\.key$ {
            vod_mode local;
            vod hls;
            vod_base_url "";

            set $stream_uuid $1;
            set $user_sig $arg_s;
            set_hmac_sha1 $sig $rtmp_secret "$cookie_sessionid $stream_uuid";

            if ($http_authorization) {
                set_hmac_sha1 $sig $rtmp_secret "$http_authorization $stream_uuid";
            }

            set_encode_base64 $sig $sig;

            if ($sig != $user_sig) {
                return 403;
            }

            auth_request /authorize;
            vod_hls_encryption_method aes-128;
            vod_secret_key "$rtmp_secret $stream_uuid";
        }
        {% endif %}

        location ~ ^/vod/([^/]+)/.+\.(m3u8|ts)$ {
            vod_mode local;
            vod hls;
            vod_base_url "";

            {% if vod_enable_encryption %}
            set $stream_uuid $1;
            vod_hls_encryption_method aes-128;
            vod_secret_key "$rtmp_secret $stream_uuid";
            set_hmac_sha1 $sig $rtmp_secret "$cookie_sessionid $stream_uuid";

            if ($http_authorization) {
                set_hmac_sha1 $sig $rtmp_secret "$http_authorization $stream_uuid";
            }

            set_encode_base64 $sig $sig;
            vod_hls_encryption_key_uri "encryption.key?s=$sig";
            {% endif %}
        }

        location = /offline.mp4 {
            mp4;
            expires max;
        }

        location /static/ {
            expires max;
        }

        location / {
            expires off;
            proxy_pass http://app/;
        }
    }
}
