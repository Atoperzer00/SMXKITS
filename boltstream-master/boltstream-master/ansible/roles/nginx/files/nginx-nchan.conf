user nginx;
worker_processes auto;
error_log /var/log/nginx/nchan-error.log notice;
pid /run/nginx-nchan.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 8192;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" $request_time';
    access_log /var/log/nginx/nchan-access.log main;
    aio on;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    variables_hash_max_size 4096;
    client_max_body_size 0;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    resolver 127.0.0.1 valid=300s;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    set_real_ip_from 127.0.0.1;
    set_real_ip_from 10.0.0.0/8;

    upstream app {
        server 127.0.0.1:{{ app_port }};
    }

    {% if nchan_use_redis %}
    upstream redis {
        server {{ cache_host }}:{{ cache_port }};
    }
    {% endif %}

    server {
        listen 127.0.0.1:8082;
        server_name {{ app_host }};
        root "{{ web_root }}";

        add_header Access-Control-Allow-Origin "https://{{ app_host }}";
        add_header Access-Control-Allow-Methods "GET,HEAD,OPTIONS";
        add_header Access-Control-Allow-Credentials "true";
        proxy_set_header Host $http_host;
        expires -1d;
        set $rtmp_secret "{{ rtmp_secret }}";

        location = /authorize_channel_access {
            internal;
            proxy_set_header X-RTMP-Secret $rtmp_secret;
            proxy_set_header X-Stream-UUID $nchan_channel_id;
            proxy_pass http://app/authorize_channel_access;
        }

        location = /authorize_channel_message {
            internal;
            proxy_set_header X-RTMP-Secret $rtmp_secret;
            proxy_set_header X-Stream-UUID $nchan_channel_id;
            proxy_pass http://app/authorize_channel_message;
        }

        location ~ ^/channel/(.+)$ {
            # nchan_authorize_request /authorize_channel_access;
            # nchan_publisher_upstream_request /authorize_channel_message;
            nchan_publisher websocket http;
            nchan_subscriber websocket http-raw-stream;
            nchan_channel_id $1;
            nchan_channel_id_split_delimiter ",";
            nchan_store_messages off;
            {% if nchan_use_redis %}
            nchan_redis_pass redis;
            {% endif %}
        }
    }
}
